# Prepared by Community.lawyer on 10/1/2019
# Compatible with Docassemble version 0.5.4
---
modules:
  - docassemble.base.util
  - .debug
---
mandatory: True
code: |
  from docassemble.base.functions import get_uid
  if not defined("___answers_session_id"):
    define("___answers_session_id", get_uid())
---
mandatory: True
code: |
  define("Today", today())
---
mandatory: True
code: |
  import json
  ___subject_url = url_args.get("subject_url")
  if (___subject_url):
    if ("/api/v4/contacts/" in ___subject_url):
      define("clio_contact_id", ___subject_url.replace("/api/v4/contacts/", ''))
    elif ("/api/v4/matters/" in ___subject_url):
      ___matter_id = ___subject_url.replace("/api/v4/matters/", '')
      define("clio_matter_id", ___matter_id)

      refresh_url = "https://app.clio.com/oauth/token"
      refresh_data = {'client_id': get_config('clio client id'), 'client_secret': get_config('clio secret key'), 'grant_type': 'refresh_token', 'refresh_token': ''}
      refresh_response = requests.post(url = refresh_url, data = refresh_data)
      ___access_token = json.loads(refresh_response.content.decode()).get('access_token')
      headers = {'Content-Type': 'application/json', 'Authorization': "Bearer %s" %(___access_token)}
      ___matter_url = "https://app.clio.com/api/v4/matters/%s?fields=client{id,name}" %(___matter_id)
      ___clio_matters_api_response = requests.get(___matter_url, headers=headers).json().get('data')
      ___contact_id = ___clio_matters_api_response.get('client').get('id')
      define("clio_contact_id", ___contact_id)
---
mandatory: True
code: |
  define("___memoized_values", {})
---
initial: True
code: |
  def ___compiled_metapython_block():
    return True

  import datetime
  import types

  def empty_string():
    return ""

  def ternary(condition, true_value, false_value):
    if is_undefined(condition):
      return Undefined()
    elif is_true(augment(condition)):
      return primitive_value(true_value)
    else:
      return primitive_value(false_value)

  def cl_array_access(array, _index):
    index = _index - 1
    return (array[index] if index < len(array) else None)

  def primitive_value(something):
    return augment(something).wrapped

  def Undefined():
    return augment(None)

  def erase(variable_name):
    undefine(variable_name)
    ___memoized_values.pop(variable_name, None)

  def is_true(arg):
    return primitive_value(arg) == True

  def is_false(arg):
    return primitive_value(arg) == False

  def is_falsy(arg):
    wrapped = primitive_value(arg)
    return wrapped == False or wrapped == None

  def is_truthy(arg):
    wrapped = primitive_value(arg)
    return not is_falsy(wrapped)

  def is_augmented(something):
    return something.__class__.__name__ == 'Augmented'

  def augment(something=None):
    if is_augmented(something):
      return something
    return Augmented(something)

  def is_undefined(something):
    return augment(something).wrapped == None

  def is_not_undefined(something):
    return not is_undefined(something)

  class Augmented(object):
    def __init__(self, something):
      self.wrapped = something
    def __str__(self):
      return str(self.wrapped)
    # array
    def array_index(self, _arg):
      arg = augment(_arg)
      if is_undefined(self) or is_undefined(arg):
        return Undefined()
      return augment(cl_array_access(self.wrapped, int(arg.wrapped)))
    def array_size(self):
      if is_undefined(self):
        return self
      return augment(len(self.wrapped))
    def array_leading(self, _arg):
      arg = augment(_arg)
      if is_undefined(self) or is_undefined(arg):
        return Undefined()
      return augment(self.wrapped[:int(arg.wrapped)])
    def array_trailing(self, _arg):
      arg = augment(_arg)
      if is_undefined(self) or is_undefined(arg):
        return Undefined()
      return augment(self.wrapped[int(-(arg.wrapped)):])
    def array_excluding_leading(self, _arg):
      arg = augment(_arg)
      if is_undefined(self) or is_undefined(arg):
        return Undefined()
      return augment(self.wrapped[int(arg.wrapped):])
    def array_excluding_trailing(self, _arg):
      arg = augment(_arg)
      if is_undefined(self) or is_undefined(arg):
        return Undefined()
      return augment(self.wrapped[:int(-(arg.wrapped))])
    # boolean
    def boolean_and(self, _arg):
      arg = augment(_arg)
      if is_false(self.wrapped) or is_false(arg.wrapped):
        return augment(False)
      if is_undefined(self) or is_undefined(arg):
        return Undefined()
      return augment(self.wrapped and arg.wrapped)
    def boolean_or(self, _arg):
      arg = augment(_arg)
      if is_true(self.wrapped) or is_true(arg.wrapped):
        return augment(True)
      if is_undefined(self) or is_undefined(arg):
        return Undefined()
      return augment(self.wrapped or arg.wrapped)
    def boolean_not(self):
      if is_undefined(self):
        return self
      return augment(not self.wrapped)
    def boolean_eq(self, _arg):
      arg = augment(_arg)
      if is_undefined(self) or is_undefined(arg):
        return Undefined()
      return augment(self.wrapped == arg.wrapped)
    def boolean_ne(self, _arg):
      arg = augment(_arg)
      if is_undefined(self) or is_undefined(arg):
        return Undefined()
      return augment(self.wrapped != arg.wrapped)
    # number
    def number_add(self, _arg):
      arg = augment(_arg)
      if is_undefined(self) or is_undefined(arg):
        return Undefined()
      return augment(self.wrapped + arg.wrapped)
    def number_subtract(self, _arg):
      arg = augment(_arg)
      if is_undefined(self) or is_undefined(arg):
        return Undefined()
      return augment(self.wrapped - arg.wrapped)
    def number_multiply(self, _arg):
      arg = augment(_arg)
      if is_undefined(self) or is_undefined(arg):
        return Undefined()
      return augment(self.wrapped * arg.wrapped)
    def number_divide(self, _arg):
      arg = augment(_arg)
      if is_undefined(self) or is_undefined(arg):
        return Undefined()
      if arg.wrapped == 0:
        return Undefined()
      return augment(self.wrapped / arg.wrapped)
    def number_eq(self, _arg):
      arg = augment(_arg)
      if is_undefined(self) or is_undefined(arg):
        return Undefined()
      return augment(self.wrapped == arg.wrapped)
    def number_ne(self, _arg):
      arg = augment(_arg)
      if is_undefined(self) or is_undefined(arg):
        return Undefined()
      return augment(self.wrapped != arg.wrapped)
    def number_gt(self, _arg):
      arg = augment(_arg)
      if is_undefined(self) or is_undefined(arg):
        return Undefined()
      return augment(self.wrapped > arg.wrapped)
    def number_gte(self, _arg):
      arg = augment(_arg)
      if is_undefined(self) or is_undefined(arg):
        return Undefined()
      return augment(self.wrapped >= arg.wrapped)
    def number_lt(self, _arg):
      arg = augment(_arg)
      if is_undefined(self) or is_undefined(arg):
        return Undefined()
      return augment(self.wrapped < arg.wrapped)
    def number_lte(self, _arg):
      arg = augment(_arg)
      if is_undefined(self) or is_undefined(arg):
        return Undefined()
      return augment(self.wrapped <= arg.wrapped)
    # string
    def string_join_with_space(self, _arg):
      arg = augment(_arg)
      if is_undefined(self) or is_undefined(arg):
        return Undefined()
      return augment(self.wrapped + ' ' + arg.wrapped)
    def string_join_without_space(self, _arg):
      arg = augment(_arg)
      if is_undefined(self) or is_undefined(arg):
        return Undefined()
      return augment(self.wrapped + arg.wrapped)
    def string_eq(self, _arg):
      arg = augment(_arg)
      if is_undefined(self) or is_undefined(arg):
        return Undefined()
      return augment(self.wrapped == arg.wrapped)
    def string_ne(self, _arg):
      arg = augment(_arg)
      if is_undefined(self) or is_undefined(arg):
        return Undefined()
      return augment(self.wrapped != arg.wrapped)
    def string_length(self):
      if is_undefined(self):
        return Undefined()
      return augment(len(self.wrapped))
    # time
    def time_eq(self, _arg):
      arg = augment(_arg)
      if is_undefined(self) or is_undefined(arg):
        return Undefined()
      return augment(self.wrapped == arg.wrapped)
    def time_ne(self, _arg):
      arg = augment(_arg)
      if is_undefined(self) or is_undefined(arg):
        return Undefined()
      return augment(self.wrapped != arg.wrapped)
    def time_gt(self, _arg):
      arg = augment(_arg)
      if is_undefined(self) or is_undefined(arg):
        return Undefined()
      return augment(self.wrapped > arg.wrapped)
    def time_gte(self, _arg):
      arg = augment(_arg)
      if is_undefined(self) or is_undefined(arg):
        return Undefined()
      return augment(self.wrapped >= arg.wrapped)
    def time_lt(self, _arg):
      arg = augment(_arg)
      if is_undefined(self) or is_undefined(arg):
        return Undefined()
      return augment(self.wrapped < arg.wrapped)
    def time_lte(self, _arg):
      arg = augment(_arg)
      if is_undefined(self) or is_undefined(arg):
        return Undefined()
      return augment(self.wrapped <= arg.wrapped)
    # date
    def date_eq(self, _arg):
      arg = augment(_arg)
      if is_undefined(self) or is_undefined(arg):
        return Undefined()
      return augment(self.wrapped == arg.wrapped)
    def date_ne(self, _arg):
      arg = augment(_arg)
      if is_undefined(self) or is_undefined(arg):
        return Undefined()
      return augment(self.wrapped != arg.wrapped)
    def date_gt(self, _arg):
      arg = augment(_arg)
      if is_undefined(self) or is_undefined(arg):
        return Undefined()
      return augment(self.wrapped > arg.wrapped)
    def date_gte(self, _arg):
      arg = augment(_arg)
      if is_undefined(self) or is_undefined(arg):
        return Undefined()
      return augment(self.wrapped >= arg.wrapped)
    def date_lt(self, _arg):
      arg = augment(_arg)
      if is_undefined(self) or is_undefined(arg):
        return Undefined()
      return augment(self.wrapped < arg.wrapped)
    def date_lte(self, _arg):
      arg = augment(_arg)
      if is_undefined(self) or is_undefined(arg):
        return Undefined()
      return augment(self.wrapped <= arg.wrapped)
    # dictionary
    def dictionary_all_false(self):
      if is_undefined(self):
        return self
      return augment(self.wrapped.all_false())
    def dictionary_all_true(self):
      if is_undefined(self):
        return self
      return augment(self.wrapped.all_true())
    def dictionary_any_false(self):
      if is_undefined(self):
        return self
      return augment(self.wrapped.any_false())
    def dictionary_any_true(self):
      if is_undefined(self):
        return self
      return augment(self.wrapped.any_true())
    def dictionary_access(self, _arg):
      arg = augment(_arg)
      if is_undefined(self) or is_undefined(arg):
        return self
      return augment(self.wrapped.get(arg.wrapped))

    def clio_contacts_dictionary_access(self, contact_id):
      import json
      if is_undefined(self) or is_undefined(contact_id):
        return Undefined()
      ___refresh_url = "https://app.clio.com/oauth/token"
      ___refresh_data = {'client_id': get_config('clio client id'), 'client_secret': get_config('clio secret key'), 'grant_type': 'refresh_token', 'refresh_token': ''}
      ___refresh_response = requests.post(url = ___refresh_url, data = ___refresh_data)
      ___clio_access_token = json.loads(___refresh_response.content.decode()).get('access_token')
      ___headers = {'Content-Type': 'application/json', 'Authorization': "Bearer %s" %(___clio_access_token)}
      ___member_response = requests.get("https://app.clio.com/api/v4/contacts/" + str(primitive_value(contact_id)) + "?" + primitive_value(self).get('url_parameters'), headers=___headers).json().get('data')
      ___all_field_values = {}
      ___fields = primitive_value(self).get('fields')
      for field in ___fields:
        ___all_field_values.update({ field.get('name'): clio_response_getter(___member_response, field.get('attribute_name'), field.get('sub_attribute_name'), field.get('selector'), field.get('mapped_to_custom_field')) })
      return augment(___all_field_values)

    def clio_matters_dictionary_access(self, matter_id):
      import json
      if is_undefined(self) or is_undefined(matter_id):
        return Undefined()
      ___refresh_url = "https://app.clio.com/oauth/token"
      ___refresh_data = {'client_id': get_config('clio client id'), 'client_secret': get_config('clio secret key'), 'grant_type': 'refresh_token', 'refresh_token': ''}
      ___refresh_response = requests.post(url = ___refresh_url, data = ___refresh_data)
      ___clio_access_token = json.loads(___refresh_response.content.decode()).get('access_token')
      ___headers = {'Content-Type': 'application/json', 'Authorization': "Bearer %s" %(___clio_access_token)}
      ___member_response = requests.get("https://app.clio.com/api/v4/matters/" + str(primitive_value(matter_id)) + "?" + primitive_value(self).get('url_parameters'), headers=___headers).json().get('data')
      ___all_field_values = {}
      ___fields = primitive_value(self).get('fields')
      for field in ___fields:
        ___all_field_values.update({ field.get('name'): clio_response_getter(___member_response, field.get('attribute_name'), field.get('sub_attribute_name'), field.get('selector'), field.get('mapped_to_custom_field')) })
      return augment(___all_field_values)
      
    # date math
    def days_after(self, _arg):
      arg = augment(_arg)
      if is_undefined(self) or is_undefined(arg):
        return Undefined()
      return augment(arg.wrapped.plus(days=self.wrapped))
    def months_after(self, _arg):
      arg = augment(_arg)
      if is_undefined(self) or is_undefined(arg):
        return Undefined()
      return augment(arg.wrapped.plus(months=self.wrapped))
    def years_after(self, _arg):
      arg = augment(_arg)
      if is_undefined(self) or is_undefined(arg):
        return Undefined()
      return augment(arg.wrapped.plus(years=self.wrapped))
    def days_before(self, _arg):
      arg = augment(_arg)
      if is_undefined(self) or is_undefined(arg):
        return Undefined()
      return augment(arg.wrapped.minus(days=self.wrapped))
    def months_before(self, _arg):
      arg = augment(_arg)
      if is_undefined(self) or is_undefined(arg):
        return Undefined()
      return augment(arg.wrapped.minus(months=self.wrapped))
    def years_before(self, _arg):
      arg = augment(_arg)
      if is_undefined(self) or is_undefined(arg):
        return Undefined()
      return augment(arg.wrapped.minus(years=self.wrapped))
    # date formatting
    def date_format_ddmmyyyy(self):
      if is_undefined(self):
        return self
      return augment(format_date(self.wrapped, format='d/M/yyyy'))
    def date_format_mmddyyyy(self):
      if is_undefined(self):
        return self
      return augment(format_date(self.wrapped, format='M/d/yyyy'))
    def date_format_yyyymmdd(self):
      if is_undefined(self):
        return self
      return augment(format_date(self.wrapped, format='yyyy/M/d'))
    def date_format_mdy_month_name(self):
      if is_undefined(self):
        return self
      return augment(format_date(self.wrapped, format='long'))
    def date_format_mdy_month_name_day_name(self):
      if is_undefined(self):
        return self
      return augment(format_date(self.wrapped, format='full'))
    def days_since(self, _arg):
      arg = augment(_arg)
      if is_undefined(self) or is_undefined(arg):
        return Undefined()
      return augment((self.wrapped - arg.wrapped).days)
    def months_since(self, _arg):
      from dateutil import relativedelta
      arg = augment(_arg)
      if is_undefined(self) or is_undefined(arg):
        return Undefined()
      diff = relativedelta.relativedelta(self.wrapped, arg.wrapped)
      months_diff = diff.months
      years_diff = diff.years
      return augment(months_diff + (years_diff * 12))
    def years_since(self, _arg):
      from dateutil import relativedelta
      arg = augment(_arg)
      if is_undefined(self) or is_undefined(arg):
        return Undefined()
      diff = relativedelta.relativedelta(self.wrapped, arg.wrapped)
      return augment(diff.years)
    # checkbox formatting
    def boolean_valued_dictionary_as_comma_delimited_list_of_true_values(self):
      if is_undefined(self):
        return Undefined()
      inner_dict = self.wrapped
      keys_for_true_values = [k for k, v in inner_dict.items() if v]
      return augment(", ".join(keys_for_true_values))

  # typecasting
  def typecast_as_date(_arg):
    arg = augment(_arg)
    if is_undefined(arg):
      return arg
    return augment(as_datetime(arg.wrapped))
  def typecast_as_number(_arg):
    arg = augment(_arg)
    if is_undefined(arg):
      return arg
    return augment(float(arg.wrapped))
  def typecast_as_boolean(_arg):
    arg = augment(_arg)
    if is_undefined(arg):
      return arg
    wrapped = arg.wrapped
    if wrapped == 'True':
      return augment(True)
    if wrapped == 'False':
      return augment(False)
    return Undefined()
  def typecast_as_string(_arg):
    arg = augment(_arg)
    if is_undefined(arg):
      return arg
    return augment(str(arg.wrapped))
  def as_url_param_value(_arg):
    arg = augment(_arg)
    if is_undefined(arg):
      return ''
    return augment(typecast_as_string(arg.wrapped))

  # array reducers

  def number_add_array_reducer(_arg):
    from functools import reduce
    arg = augment(_arg)
    if is_undefined(arg):
      return arg
    return reduce(lambda x, y: augment(x).number_add(augment(y)), arg.wrapped)

  def number_multiply_array_reducer(_arg):
    from functools import reduce
    arg = augment(_arg)
    if is_undefined(arg):
      return arg
    return reduce(lambda x, y: augment(x).number_multiply(augment(y)), arg.wrapped)

  def number_mean_array_reducer(_arg):
    arg = augment(_arg)
    if is_undefined(arg):
      return arg
    size = arg.array_size()
    total = number_add_array_reducer(arg)
    return total.number_divide(size)

  def number_maximum_array_reducer(_arg):
    arg = augment(_arg)
    if is_undefined(arg):
      return arg
    return max(map(primitive_value, arg.wrapped))

  def number_minimum_array_reducer(_arg):
    arg = augment(_arg)
    if is_undefined(arg):
      return arg
    return min(map(primitive_value, arg.wrapped))

  def boolean_all_true_array_reducer(_arg):
    from functools import reduce
    arg = augment(_arg)
    if is_undefined(arg):
      return arg
    return reduce(lambda x, y: augment(x).boolean_and(augment(y)), arg.wrapped)

  def boolean_any_true_array_reducer(_arg):
    from functools import reduce
    arg = augment(_arg)
    if is_undefined(arg):
      return arg
    return reduce(lambda x, y: augment(x).boolean_or(augment(y)), arg.wrapped)

  def boolean_all_false_array_reducer(_arg):
    arg = augment(_arg)
    if is_undefined(arg):
      return arg
    return augment(boolean_any_true_array_reducer(arg)).boolean_not()

  def boolean_any_false_array_reducer(_arg):
    arg = augment(_arg)
    if is_undefined(arg):
      return arg
    return augment(boolean_all_true_array_reducer(arg)).boolean_not()

  def cl_array_map(myfunc, _myiterable):
    myiterable = augment(_myiterable)
    if is_undefined(myiterable):
      return myiterable
    return map(myfunc, myiterable.wrapped)

  def is_list(arg):
    return type(augment(arg).wrapped) == type([])

  def is_dict(arg):
    return type(augment(arg).wrapped) == type({})

  def as_url_param_kv_pair(key, _value):
    value = augment(_value)
    if is_list(value):
      if is_dict(cl_array_access(value.wrapped, 1)):
        return list_of_dicts_as_url_param_kv_pairs(key, value)
      else:
        pass
        # no primitive arrays yet
    elif len(str(primitive_value(value))) == 0:
      return ''
    else:
      return '&' + primitive_value(key) + "=" + primitive_value(as_url_param_value(value))

  def list_of_dicts_as_url_param_kv_pairs(key, value):
    pairs = []
    for i, mydict in enumerate(primitive_value(value)):
      for k in primitive_value(mydict).keys():
        key_for_pair = key + '[' + str(i) + ']' + '[' + str(k) + ']'
        value_for_pair = mydict[k]
        pair = '&' + str(key_for_pair) + '=' + str(value_for_pair)
        pairs.append(pair)
    return ''.join(pairs)

  def should_show_markdown_variable(var_name):
    return (defined(var_name) and value(var_name) != "")

  def string_as_bool(something):
    return str(primitive_value(something)) == 'True'

  def merge_two_dicts(x, y):
    z = x.copy()
    z.update(y)
    return z

  import re
  from bs4 import BeautifulSoup
  from markdown import markdown

  def markdown_to_plaintext(markdown_string):
    try:
      html_list = list(map(lambda str: markdown(str), markdown_string.split("\n")))
      html_list = list(map(lambda html: re.sub(r'<pre>(.*?)</pre>', ' ', html), html_list))
      html_list = list(map(lambda html: re.sub(r'<code>(.*?)</code >', ' ', html), html_list))
      soup_list = list(map(lambda html: BeautifulSoup(html, "html.parser"), html_list))
      text_list = list(map(lambda soup: ''.join(soup.findAll(text=True)), soup_list))
      text_list = list(map(lambda text: re.sub(r'\n', '\n\n', text), text_list))
      return "\n".join(text_list)
    except:
      return markdown_string

  def clio_response_getter(response_object, attribute_name, sub_attribute_name, selector, custom_field):
    if custom_field:
      ___attribute_object = list(filter(lambda item: (item.get('field_name') == attribute_name), response_object.get('custom_field_values')))
      if (len(___attribute_object) == 0):
        return '';
      return ___attribute_object[0].get('value')
    elif (selector != ''):
      ___attribute_object = list(filter(lambda item: (item.get('name') == selector), response_object.get(attribute_name)))
      if (len(___attribute_object) == 0):
        return '';
      return ___attribute_object[0].get(sub_attribute_name)
    elif (sub_attribute_name != ''):
      ___attribute_object = response_object.get(attribute_name)
      if (___attribute_object == None):
        return ''
      return ___attribute_object.get(sub_attribute_name)
    else:
      return response_object.get(attribute_name) or ''
---
initial: True
code: |
	import json

	def ___pdf_template_4345_to_json():
	  import json, re
	  vars = all_variables()
	  return {"template_data": {"url": "https://community.lawyer/rails/active_storage/blobs/eyJfcmFpbHMiOnsibWVzc2FnZSI6IkJBaHBBdjNoIiwiZXhwIjpudWxsLCJwdXIiOiJibG9iX2lkIn19--f7a1dbdf1c029d2470b4993b929bbafcf8ac81f1/MA_LLC_Annual_Report.pdf?disposition=attachment", "height": 1188, "width": 918, "page_count": 3}, "stamps": [{"x": 240.0, "y": 97.33333333333333, "width": 166.66666666666666, "height": 46.666666666666664, "page": 2, "value": markdown_to_plaintext(str((Signature_Registered_Agent.url_for() if Signature_Registered_Agent != "" else "") if ("Signature_Registered_Agent" in vars) else "")), "datatype": "signature", "context_height": 792.0, "context_width": 612.0, "font_size": 12, "font_color": "000000"}, {"x": 260.66666666666663, "y": 496.0, "width": 83.33333333333333, "height": 10.666666666666666, "page": 1, "value": markdown_to_plaintext(str("")), "datatype": "text", "context_height": 792.0, "context_width": 612.0, "font_size": 12, "font_color": "000000"}, {"x": 176.66666666666666, "y": 207.33333333333331, "width": 265.3333333333333, "height": 20.666666666666664, "page": 3, "value": markdown_to_plaintext(str(Registered_Agent_Email if ("Registered_Agent_Email" in vars) else "")), "datatype": "text", "context_height": 792.0, "context_width": 612.0, "font_size": 12, "font_color": "000000"}, {"x": 191.33333333333331, "y": 233.33333333333331, "width": 250.66666666666666, "height": 20.666666666666664, "page": 3, "value": markdown_to_plaintext(str(Registered_Agent_Telephone if ("Registered_Agent_Telephone" in vars) else "")), "datatype": "text", "context_height": 792.0, "context_width": 612.0, "font_size": 12, "font_color": "000000"}, {"x": 144.0, "y": 298.66666666666663, "width": 298.0, "height": 50.0, "page": 3, "value": markdown_to_plaintext(str(Registered_Agent_Address if ("Registered_Agent_Address" in vars) else "")), "datatype": "text", "context_height": 792.0, "context_width": 612.0, "font_size": 12, "font_color": "000000"}, {"x": 144.0, "y": 329.3333333333333, "width": 298.66666666666663, "height": 20.666666666666664, "page": 3, "value": markdown_to_plaintext(str(Registered_Agent_Name if ("Registered_Agent_Name" in vars) else "")), "datatype": "text", "context_height": 792.0, "context_width": 612.0, "font_size": 12, "font_color": "000000"}, {"x": 72.0, "y": 284.0, "width": 486.0, "height": 156.66666666666666, "page": 2, "value": markdown_to_plaintext(str(Additional_Matters if ("Additional_Matters" in vars) else "")), "datatype": "text", "context_height": 792.0, "context_width": 612.0, "font_size": 12, "font_color": "000000"}, {"x": 72.0, "y": 497.3333333333333, "width": 162.66666666666666, "height": 28.666666666666664, "page": 2, "value": markdown_to_plaintext(str(Land_Record_Executor if ("Land_Record_Executor" in vars) else "")), "datatype": "text", "context_height": 792.0, "context_width": 612.0, "font_size": 12, "font_color": "000000"}, {"x": 72.0, "y": 724.0, "width": 164.66666666666666, "height": 26.0, "page": 2, "value": markdown_to_plaintext(str(Corp_Document_Executor if ("Corp_Document_Executor" in vars) else "")), "datatype": "text", "context_height": 792.0, "context_width": 612.0, "font_size": 12, "font_color": "000000"}, {"x": 248.66666666666666, "y": 190.66666666666666, "width": 276.66666666666663, "height": 118.0, "page": 1, "value": markdown_to_plaintext(str(Manager_Address if ("Manager_Address" in vars) else "")), "datatype": "text", "context_height": 792.0, "context_width": 612.0, "font_size": 12, "font_color": "000000"}, {"x": 72.66666666666666, "y": 187.33333333333331, "width": 143.33333333333331, "height": 32.666666666666664, "page": 1, "value": markdown_to_plaintext(str(Manager_Name if ("Manager_Name" in vars) else "")), "datatype": "text", "context_height": 792.0, "context_width": 612.0, "font_size": 12, "font_color": "000000"}, {"x": 248.0, "y": 284.0, "width": 273.3333333333333, "height": 69.33333333333333, "page": 1, "value": markdown_to_plaintext(str(Registered_Agent_Address if ("Registered_Agent_Address" in vars) else "")), "datatype": "text", "context_height": 792.0, "context_width": 612.0, "font_size": 12, "font_color": "000000"}, {"x": 76.0, "y": 286.0, "width": 139.33333333333331, "height": 28.0, "page": 1, "value": markdown_to_plaintext(str(Registered_Agent_Name if ("Registered_Agent_Name" in vars) else "")), "datatype": "text", "context_height": 792.0, "context_width": 612.0, "font_size": 12, "font_color": "000000"}, {"x": 220.66666666666666, "y": 333.3333333333333, "width": 336.66666666666663, "height": 18.0, "page": 1, "value": markdown_to_plaintext(str(Dissolution_Date if ("Dissolution_Date" in vars) else "")), "datatype": "text", "context_height": 792.0, "context_width": 612.0, "font_size": 12, "font_color": "000000"}, {"x": 76.0, "y": 357.3333333333333, "width": 481.3333333333333, "height": 18.0, "page": 1, "value": markdown_to_plaintext(str(General_Character if ("General_Character" in vars) else "")), "datatype": "text", "context_height": 792.0, "context_width": 612.0, "font_size": 12, "font_color": "000000"}, {"x": 76.0, "y": 450.66666666666663, "width": 481.3333333333333, "height": 72.66666666666666, "page": 1, "value": markdown_to_plaintext(str(LLC_Records_Address if ("LLC_Records_Address" in vars) else "")), "datatype": "text", "context_height": 792.0, "context_width": 612.0, "font_size": 12, "font_color": "000000"}, {"x": 76.0, "y": 498.66666666666663, "width": 481.3333333333333, "height": 18.0, "page": 1, "value": markdown_to_plaintext(str(LLC_Office_Address if ("LLC_Office_Address" in vars) else "")), "datatype": "text", "context_height": 792.0, "context_width": 612.0, "font_size": 12, "font_color": "000000"}, {"x": 76.0, "y": 498.66666666666663, "width": 481.3333333333333, "height": 18.0, "page": 1, "value": markdown_to_plaintext(str("")), "datatype": "text", "context_height": 792.0, "context_width": 612.0, "font_size": 12, "font_color": "000000"}, {"x": 76.0, "y": 546.0, "width": 481.3333333333333, "height": 18.0, "page": 1, "value": markdown_to_plaintext(str(LLC_Name_Amended if ("LLC_Name_Amended" in vars) else "")), "datatype": "text", "context_height": 792.0, "context_width": 612.0, "font_size": 12, "font_color": "000000"}, {"x": 76.0, "y": 594.0, "width": 481.3333333333333, "height": 18.0, "page": 1, "value": markdown_to_plaintext(str(LLC_Name if ("LLC_Name" in vars) else "")), "datatype": "text", "context_height": 792.0, "context_width": 612.0, "font_size": 12, "font_color": "000000"}, {"x": 454.0, "y": 645.3333333333333, "width": 103.33333333333333, "height": 18.0, "page": 1, "value": markdown_to_plaintext(str(Annual_Report_Year if ("Annual_Report_Year" in vars) else "")), "datatype": "text", "context_height": 792.0, "context_width": 612.0, "font_size": 12, "font_color": "000000"}, {"x": 158.66666666666666, "y": 645.3333333333333, "width": 146.66666666666666, "height": 18.0, "page": 1, "value": markdown_to_plaintext(str(LLC_FEIN if ("LLC_FEIN" in vars) else "")), "datatype": "text", "context_height": 792.0, "context_width": 612.0, "font_size": 12, "font_color": "000000"}], "should_watermark": True}


	def ___define_until_idempotent():
		___define_immutable_until_idempotent()
		___define_continuous_until_idempotent()

	def ___define_immutable_until_idempotent():
		original_dict = all_variables()
		___define_immutable()
		if all_variables() != original_dict:
			re_run_logic()
	def ___define_continuous_until_idempotent():
		original_dict = all_variables()
		___define_continuous()
		if all_variables() != original_dict:
			re_run_logic()
	def ___define_immutable():
		vars = all_variables()

		if ((not ("___shortcut_30_false" in vars)) and (("variable_1" in vars))):
			define("___shortcut_30_false", ((primitive_value(((augment(variable_1) if ("variable_1" in vars) else Undefined()).boolean_eq(augment(False)))))))



	def ___define_continuous():
		vars = all_variables()




	def rich_text_variable_dictionary():
		vars = all_variables()
		return {

		}
---
initial: True
code: |
	___define_until_idempotent()
---
initial: True
code: |
	def passive_possible_variables():
		vars = all_variables()
		return { 'Additional_Matters': markdown_to_plaintext(Additional_Matters) if ("Additional_Matters" in vars) else '', 'Annual_Report_Year': markdown_to_plaintext(Annual_Report_Year) if ("Annual_Report_Year" in vars) else '', 'Corp_Document_Executor': markdown_to_plaintext(Corp_Document_Executor) if ("Corp_Document_Executor" in vars) else '', 'Dissolution_Date': markdown_to_plaintext(Dissolution_Date) if ("Dissolution_Date" in vars) else '', 'General_Character': markdown_to_plaintext(General_Character) if ("General_Character" in vars) else '', 'LLC_FEIN': markdown_to_plaintext(LLC_FEIN) if ("LLC_FEIN" in vars) else '', 'LLC_Name': markdown_to_plaintext(LLC_Name) if ("LLC_Name" in vars) else '', 'LLC_Name_Amended': markdown_to_plaintext(LLC_Name_Amended) if ("LLC_Name_Amended" in vars) else '', 'LLC_Office_Address': markdown_to_plaintext(LLC_Office_Address) if ("LLC_Office_Address" in vars) else '', 'LLC_Records_Address': markdown_to_plaintext(LLC_Records_Address) if ("LLC_Records_Address" in vars) else '', 'Land_Record_Executor': markdown_to_plaintext(Land_Record_Executor) if ("Land_Record_Executor" in vars) else '', 'Manager_Address': markdown_to_plaintext(Manager_Address) if ("Manager_Address" in vars) else '', 'Manager_Name': markdown_to_plaintext(Manager_Name) if ("Manager_Name" in vars) else '', 'Registered_Agent_Address': markdown_to_plaintext(Registered_Agent_Address) if ("Registered_Agent_Address" in vars) else '', 'Registered_Agent_Email': markdown_to_plaintext(Registered_Agent_Email) if ("Registered_Agent_Email" in vars) else '', 'Registered_Agent_Name': markdown_to_plaintext(Registered_Agent_Name) if ("Registered_Agent_Name" in vars) else '', 'Registered_Agent_Telephone': markdown_to_plaintext(Registered_Agent_Telephone) if ("Registered_Agent_Telephone" in vars) else '', 'Signature_Person_Forming_LLC': markdown_to_plaintext(Signature_Person_Forming_LLC) if ("Signature_Person_Forming_LLC" in vars) else '', 'Signature_Registered_Agent': markdown_to_plaintext(Signature_Registered_Agent) if ("Signature_Registered_Agent" in vars) else '', 'Today': markdown_to_plaintext(Today) if ("Today" in vars) else '', '___shortcut_30_false': markdown_to_plaintext(___shortcut_30_false) if ("___shortcut_30_false" in vars) else '', 'variable_1': markdown_to_plaintext(variable_1) if ("variable_1" in vars) else '' }
---
initial: True
code: |
	import requests, json, time

	def ___MA_LLC_Annual_Report_pdf_4345(attachment_condition, attachment_name):
	  if is_true(attachment_condition):
	    playa_base = "https://playa.community.lawyer"
	    playa_fill_endpoint = "https://playa.community.lawyer/task"
	    playa_status_endpoint = "https://playa.community.lawyer/tasks"
	    post_data = ___pdf_template_4345_to_json()
	    fill_response = requests.post(playa_fill_endpoint, json=post_data).json()
	    task_id = fill_response.get('id')
	    access_key = fill_response.get('key')
	    filled_attachment_url = ""
	    done = False
	    attempts_count = 0
	    while not done and attempts_count < 250:
	      status_url = playa_status_endpoint + '/' + str(task_id) + '?key=' + str(access_key)
	      task_response = requests.get(status_url).json()
	      done = task_response.get('status') == 'done'
	      filled_attachment_url = playa_base + '/' + task_response.get('document_url')
	      attempts_count += 1
	      time.sleep(.1)

	    ___MA_LLC_Annual_Report_pdf_4345_holder = DAFileCollection()
	    ___MA_LLC_Annual_Report_pdf_4345_holder.pdf = DAFile(filename='MA_LLC_Annual_Report.pdf')

	    if done:
	      ___MA_LLC_Annual_Report_pdf_4345_holder.pdf.from_url(filled_attachment_url)
	      ___MA_LLC_Annual_Report_pdf_4345_holder.info = {'raw': '', 'name': 'MA_LLC_Annual_Report', 'filename': 'MA_LLC_Annual_Report', 'description': ''}
	    else:
	      ___MA_LLC_Annual_Report_pdf_4345_holder.pdf.from_url('https://community.lawyer/static/blank.pdf')
	      ___MA_LLC_Annual_Report_pdf_4345_holder.info = {'raw': '', 'name': 'We encountered a problem', 'filename': 'MA_LLC_Annual_Report', 'description': 'There was a problem filling your PDF - please try again'}

	    if attachment_name == '':
	      return ___MA_LLC_Annual_Report_pdf_4345_holder
	    else:
	      define(attachment_name, ___MA_LLC_Annual_Report_pdf_4345_holder)
	      undefine('___MA_LLC_Annual_Report_pdf_4345_holder')
	      return value(attachment_name)

	  else:
	    return ''
---
mandatory: True
code: |
  import requests
  import json
  define("___authorized", requests.get("https://community.lawyer/docassemble_builder/docassemble_interviews/authorize?id=4657&key=" + str(url_args.get('key'))).json()['authorized'])
---
mandatory: |
  not ___authorized
question: Sorry, you are not authorized to access this page.
subquestion: Try signing into your account or contacting the App author.
---
features:
	debug: True
	inverse navbar: False
	javascript:
		- https://community.lawyer/static/system_d-14.js
	css:
		- https://community.lawyer/static/styles/jcc-11.css
---
metadata:
	title: |
		New App copy
---
mandatory: True
code: |
  multi_user = True
---
mandatory: True
code: |
  from docassemble.base.util import device
  ___user_device = device().browser.family
---
mandatory: True
code: |
  if ___user_device == "IE":
    log("This app may not run as expected on Internet Explorer - please consider using a more modern browser, such as those found <a href='http://outdatedbrowser.com/en'>here</a>.", "warning")
---
id: 97090
mandatory: |
	True
question: |
	<span id="session-id" data-session-id="${user_info().session}">
	<span id="sends-answers" data-sends-answers="true">
	<span id="cl-endpoint" data-cl-endpoint="https://community.lawyer">
	<span id="interview-id" data-interview-id="4657">

subquestion: |
	# Massachusetts LLC - Annual Report
fields:
	- "<span class=\"producer \" data-variable-name=\"LLC_FEIN\" data-field-id=\"192544\" >Enter your Federal Employer Identification Number (FEIN)</span>": LLC_FEIN
		datatype: text
		required: true

	- "<span class=\"producer \" data-variable-name=\"LLC_Name\" data-field-id=\"192546\" >Enter the name of your LLC</span>": LLC_Name
		datatype: text
		required: true

	- "<span class=\"producer \" data-variable-name=\"LLC_Name_Amended\" data-field-id=\"192564\" >Enter the name of your LLC as amended, leave blank if needed</span>": LLC_Name_Amended
		datatype: text
		required: true

	- "<span class=\"producer \" data-variable-name=\"LLC_Office_Address\" data-field-id=\"192547\" >Enter the address of your principal office</span>": LLC_Office_Address
		datatype: text
		required: true

	- "<span class=\"producer \" data-variable-name=\"LLC_Records_Address\" data-field-id=\"192565\" >Enter the address where you keep records</span>": LLC_Records_Address
		datatype: text
		required: true

	- "<span class=\"producer \" data-variable-name=\"General_Character\" data-field-id=\"192548\" >What is the general character of the business?</span>": General_Character
		datatype: text
		required: true

	- "<span class=\"producer \" data-variable-name=\"Dissolution_Date\" data-field-id=\"192549\" >What is the latest date you have identified as dissolution? If none, leave blank</span>": Dissolution_Date
		datatype: text
		required: false

	- "<span class=\"producer \" data-variable-name=\"Registered_Agent_Name\" data-field-id=\"192550\" >Enter the name of your Registered Agent</span>": Registered_Agent_Name
		datatype: text
		required: true

	- "<span class=\"producer \" data-variable-name=\"Registered_Agent_Address\" data-field-id=\"192551\" >Enter the address of your Registered Agent</span>": Registered_Agent_Address
		datatype: text
		required: true

	- "<span class=\"producer \" data-variable-name=\"Registered_Agent_Email\" data-field-id=\"192558\" >Enter the email address of your Registered Agent</span>": Registered_Agent_Email
		datatype: text
		required: true

	- "<span class=\"producer \" data-variable-name=\"Registered_Agent_Telephone\" data-field-id=\"192557\" >Enter the telephone number of your Registered Agent</span>": Registered_Agent_Telephone
		datatype: text
		required: true

	- "<span class=\"producer \" data-variable-name=\"Manager_Name\" data-field-id=\"192552\" >Enter the name of your Manager</span>": Manager_Name
		datatype: text
		required: true

	- "<span class=\"producer \" data-variable-name=\"Manager_Address\" data-field-id=\"192553\" >Enter the address of your Manager</span>": Manager_Address
		datatype: text
		required: true

	- "<span class=\"producer \" data-variable-name=\"Corp_Document_Executor\" data-field-id=\"192554\" >Enter the name of the person, in addition to the manager, who is authorized to execute documents filed with the Corporations Division</span>": Corp_Document_Executor
		datatype: text
		required: true

	- "<span class=\"producer \" data-variable-name=\"Land_Record_Executor\" data-field-id=\"192555\" >Enter the name of each person authorized to execute records with a registry of deeds or district office of the land court</span>": Land_Record_Executor
		datatype: text
		required: true

	- "<span class=\"producer \" data-variable-name=\"Additional_Matters\" data-field-id=\"192556\" >Additional Matters</span>": Additional_Matters
		datatype: text
		required: false

	- "<span class=\"producer \" data-variable-name=\"Annual_Report_Year\" data-field-id=\"192619\" >Enter Report Year</span>": Annual_Report_Year
		datatype: integer
		required: true

under: |
	<hr>	<div style='display:flex;justify-content:space-between;'><div>Powered by [Community.lawyer](https://community.lawyer/)</div><div>[Save and continue later](https://community.lawyer/app${ interview_url(local=True, interview_id=4657).replace('/interview?', '?') })</div></div>
right: |
	<span class='test-mode-alert'>TEST MODE: This app is in test mode. To remove this message, you must activate the app.</span>

css: |
	<style>
		:root {
			--body-color: #fff;
			--navbar-color: #2D3C4E;
			--text-color: #212529;
			--primary-btn-background-color: #f4ac3b;
			--primary-btn-background-color-hover: #ef970d;
			--primary-btn-text-color: #212529;
			--secondary-btn-background-color: #ffc107;
			--secondary-btn-background-color-hover: #d39e00;
			--secondary-btn-text-color: #212529;
			--text-link-color: #007bff;
			--progress-bar-color: #f4ac3b;
			--hide-navbar-background-color: #fff;
		}

	</style>
---
id: 97091
mandatory: |
	True
question: |
	<span id="session-id" data-session-id="${user_info().session}">
	<span id="sends-answers" data-sends-answers="true">
	<span id="cl-endpoint" data-cl-endpoint="https://community.lawyer">
	<span id="interview-id" data-interview-id="4657">

subquestion: |
	Name of person forming the LLC [assuming registered agent]
signature: Signature_Person_Forming_LLC

under: |
	<hr>	<div style='display:flex;justify-content:space-between;'><div>Powered by [Community.lawyer](https://community.lawyer/)</div><div>[Save and continue later](https://community.lawyer/app${ interview_url(local=True, interview_id=4657).replace('/interview?', '?') })</div></div>
right: |
	<span class='test-mode-alert'>TEST MODE: This app is in test mode. To remove this message, you must activate the app.</span>

css: |
	<style>
		:root {
			--body-color: #fff;
			--navbar-color: #2D3C4E;
			--text-color: #212529;
			--primary-btn-background-color: #f4ac3b;
			--primary-btn-background-color-hover: #ef970d;
			--primary-btn-text-color: #212529;
			--secondary-btn-background-color: #ffc107;
			--secondary-btn-background-color-hover: #d39e00;
			--secondary-btn-text-color: #212529;
			--text-link-color: #007bff;
			--progress-bar-color: #f4ac3b;
			--hide-navbar-background-color: #fff;
		}

	</style>
---
id: 97092
mandatory: |
	True
question: |
	<span id="session-id" data-session-id="${user_info().session}">
	<span id="sends-answers" data-sends-answers="true">
	<span id="cl-endpoint" data-cl-endpoint="https://community.lawyer">
	<span id="interview-id" data-interview-id="4657">

subquestion: |
	Registered Agent Signature
signature: Signature_Registered_Agent

under: |
	<hr>	<div style='display:flex;justify-content:space-between;'><div>Powered by [Community.lawyer](https://community.lawyer/)</div><div>[Save and continue later](https://community.lawyer/app${ interview_url(local=True, interview_id=4657).replace('/interview?', '?') })</div></div>
right: |
	<span class='test-mode-alert'>TEST MODE: This app is in test mode. To remove this message, you must activate the app.</span>

css: |
	<style>
		:root {
			--body-color: #fff;
			--navbar-color: #2D3C4E;
			--text-color: #212529;
			--primary-btn-background-color: #f4ac3b;
			--primary-btn-background-color-hover: #ef970d;
			--primary-btn-text-color: #212529;
			--secondary-btn-background-color: #ffc107;
			--secondary-btn-background-color-hover: #d39e00;
			--secondary-btn-text-color: #212529;
			--text-link-color: #007bff;
			--progress-bar-color: #f4ac3b;
			--hide-navbar-background-color: #fff;
		}

	</style>
---
id: 97142
mandatory: |
	True
question: |
	<span id="session-id" data-session-id="${user_info().session}">
	<span id="sends-answers" data-sends-answers="true">
	<span id="cl-endpoint" data-cl-endpoint="https://community.lawyer">
	<span id="interview-id" data-interview-id="4657">

subquestion: |
	Every limited liability company must file an annual report with the Corporations Division on or before the anniversary date of the filing of its original certificate of organization. The report shall contain all of the information included in its certificate of organization and any other matters the authorized person determines to include. The filing fee for an annual report is five hundred dollars ($500.00).
field: variable_1

under: |
	<hr>	<div style='display:flex;justify-content:space-between;'><div>Powered by [Community.lawyer](https://community.lawyer/)</div><div>[Save and continue later](https://community.lawyer/app${ interview_url(local=True, interview_id=4657).replace('/interview?', '?') })</div></div>
right: |
	<span class='test-mode-alert'>TEST MODE: This app is in test mode. To remove this message, you must activate the app.</span>

css: |
	<style>
		:root {
			--body-color: #fff;
			--navbar-color: #2D3C4E;
			--text-color: #212529;
			--primary-btn-background-color: #f4ac3b;
			--primary-btn-background-color-hover: #ef970d;
			--primary-btn-text-color: #212529;
			--secondary-btn-background-color: #ffc107;
			--secondary-btn-background-color-hover: #d39e00;
			--secondary-btn-text-color: #212529;
			--text-link-color: #007bff;
			--progress-bar-color: #f4ac3b;
			--hide-navbar-background-color: #fff;
		}

	</style>
---
id: 97093
mandatory: |
	True
question: |
	<span id="session-id" data-session-id="${user_info().session}">
	<span id="sends-answers" data-sends-answers="true">
	<span id="cl-endpoint" data-cl-endpoint="https://community.lawyer">
	<span id="interview-id" data-interview-id="4657">

subquestion: |
	Click this to create the Annual Report

attachment code: |
	[___MA_LLC_Annual_Report_pdf_4345(True, "t____MA_LLC_Annual_Report_pdf_4345_attachment_4203")]
allow emailing: False

under: |
	<hr>	<div style='display:flex;justify-content:space-between;'><div>Powered by [Community.lawyer](https://community.lawyer/)</div><div>[Save and continue later](https://community.lawyer/app${ interview_url(local=True, interview_id=4657).replace('/interview?', '?') })</div><span class="is-final-block" /></div>
right: |
	<span class='test-mode-alert'>TEST MODE: This app is in test mode. To remove this message, you must activate the app.</span>

css: |
	<style>
		button.btn-primary[type='submit'] {
			display: none;
		}
		:root {
			--body-color: #fff;
			--navbar-color: #2D3C4E;
			--text-color: #212529;
			--primary-btn-background-color: #f4ac3b;
			--primary-btn-background-color-hover: #ef970d;
			--primary-btn-text-color: #212529;
			--secondary-btn-background-color: #ffc107;
			--secondary-btn-background-color-hover: #d39e00;
			--secondary-btn-text-color: #212529;
			--text-link-color: #007bff;
			--progress-bar-color: #f4ac3b;
			--hide-navbar-background-color: #fff;
		}

	</style>
---
mandatory: |
	True
question: |
	<span id="session-id" data-session-id="${user_info().session}">
	<span id="sends-answers" data-sends-answers="true">
	<span id="cl-endpoint" data-cl-endpoint="https://community.lawyer">
	<span id="interview-id" data-interview-id="4657">

subquestion: |
	Thank you for using this app. Your session is complete.
---
